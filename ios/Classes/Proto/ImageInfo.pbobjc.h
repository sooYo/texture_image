// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_info.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Geometry;
GPB_ENUM_FWD_DECLARE(TaskState);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ImageInfoRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ImageInfoRoot : GPBRootObject
@end

#pragma mark - ImageFetchInfo

typedef GPB_ENUM(ImageFetchInfo_FieldNumber) {
  ImageFetchInfo_FieldNumber_URL = 1,
  ImageFetchInfo_FieldNumber_ErrorPlaceholder = 2,
  ImageFetchInfo_FieldNumber_Placeholder = 3,
  ImageFetchInfo_FieldNumber_Geometry = 4,
};

/**
 * Request to load an image
 **/
GPB_FINAL @interface ImageFetchInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** Image to be shown when loading failed, can be URL or local file path */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errorPlaceholder;

/** Can be URL or local file path */
@property(nonatomic, readwrite, copy, null_resettable) NSString *placeholder;

/** Geometry info */
@property(nonatomic, readwrite, strong, null_resettable) Geometry *geometry;
/** Test to see if @c geometry has been set. */
@property(nonatomic, readwrite) BOOL hasGeometry;

@end

#pragma mark - ImageFetchResultInfo

typedef GPB_ENUM(ImageFetchResultInfo_FieldNumber) {
  ImageFetchResultInfo_FieldNumber_Code = 1,
  ImageFetchResultInfo_FieldNumber_TextureId = 2,
  ImageFetchResultInfo_FieldNumber_Message = 3,
  ImageFetchResultInfo_FieldNumber_URL = 4,
  ImageFetchResultInfo_FieldNumber_State = 5,
};

/**
 * An object to describe image request API invoking result
 * Flutter side may use the [textureId] to rebuild its UI
 * when receiving the result, but the target image may not
 * be visible right now because it maybe downloading by now
 * you can check [state] for relative task's newest status
 **/
GPB_FINAL @interface ImageFetchResultInfo : GPBMessage

/**
 * The result code of process, if this code's value is not 200
 * then the [textureId] shall be invalid and error placeholder
 * is supposed to be shown on this situation
 **/
@property(nonatomic, readwrite) int32_t code;

/** Texture widget id for this image */
@property(nonatomic, readwrite) int64_t textureId;

/** Description for the result */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

/** Requesting image's url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** Relative image fetching task's current status */
@property(nonatomic, readwrite) enum TaskState state;

@end

/**
 * Fetches the raw value of a @c ImageFetchResultInfo's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ImageFetchResultInfo_State_RawValue(ImageFetchResultInfo *message);
/**
 * Sets the raw value of an @c ImageFetchResultInfo's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetImageFetchResultInfo_State_RawValue(ImageFetchResultInfo *message, int32_t value);

#pragma mark - ImageFetchCancelInfo

typedef GPB_ENUM(ImageFetchCancelInfo_FieldNumber) {
  ImageFetchCancelInfo_FieldNumber_URL = 1,
  ImageFetchCancelInfo_FieldNumber_TextureId = 2,
};

/**
 * Request to cancel an ongoing loading task
 **/
GPB_FINAL @interface ImageFetchCancelInfo : GPBMessage

/**
 * You have to provide this property then image loaders from
 * native sides can guarantee that at least they can find origin
 * task by url in a slower way. At some situation widgets gets
 * disposed before start loading channel API replies a result,
 * and thus widget cannot provide a correct texture id to cancel
 * ongoing download task, then this property would help
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/**
 * Given this property for loaders to search download task more
 * efficiently if you have one
 **/
@property(nonatomic, readwrite) int64_t textureId;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
