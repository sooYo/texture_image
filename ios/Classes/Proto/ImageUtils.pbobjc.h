// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_utils.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class BorderRadius;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BoxFit

typedef GPB_ENUM(BoxFit) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BoxFit_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  BoxFit_Fill = 0,
  BoxFit_Contain = 1,
  BoxFit_Cover = 2,
  BoxFit_FitWidth = 3,
  BoxFit_FitHeight = 4,
};

GPBEnumDescriptor *BoxFit_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BoxFit_IsValidValue(int32_t value);

#pragma mark - Enum TaskState

/** Image task state */
typedef GPB_ENUM(TaskState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TaskState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Task is now ready to start */
  TaskState_Initialized = 0,
  TaskState_Loading = 1,

  /** Task completed successfully */
  TaskState_Completed = 2,
  TaskState_Failed = 3,

  /** Image widget has been disposed */
  TaskState_Disposed = 4,

  /** For initialization only */
  TaskState_Undefined = 5,

  /** Watiing for reusing */
  TaskState_PrepreReuse = 6,
};

GPBEnumDescriptor *TaskState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TaskState_IsValidValue(int32_t value);

#pragma mark - ImageUtilsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ImageUtilsRoot : GPBRootObject
@end

#pragma mark - BorderRadius

typedef GPB_ENUM(BorderRadius_FieldNumber) {
  BorderRadius_FieldNumber_TopLeft = 1,
  BorderRadius_FieldNumber_TopRight = 2,
  BorderRadius_FieldNumber_BottomLeft = 3,
  BorderRadius_FieldNumber_BottomRight = 4,
};

GPB_FINAL @interface BorderRadius : GPBMessage

@property(nonatomic, readwrite) double topLeft;

@property(nonatomic, readwrite) double topRight;

@property(nonatomic, readwrite) double bottomLeft;

@property(nonatomic, readwrite) double bottomRight;

@end

#pragma mark - Geometry

typedef GPB_ENUM(Geometry_FieldNumber) {
  Geometry_FieldNumber_Width = 1,
  Geometry_FieldNumber_Height = 2,
  Geometry_FieldNumber_SupportAlpha = 3,
  Geometry_FieldNumber_Fit = 4,
  Geometry_FieldNumber_BorderRadius = 5,
};

GPB_FINAL @interface Geometry : GPBMessage

@property(nonatomic, readwrite) int32_t width;

@property(nonatomic, readwrite) int32_t height;

/**
 * Indicate whether this image has alpha channel
 *
 * On Android platform, if this is not supported,
 * then bitmap loader will try using RGB_565 format
 * to decode the image, result in size reducing,
 * Otherwise, ARGB_888 format will used. On this format,
 * each pixel is stored using 4 bytes.
 *
 * It is suggested to disable this feature when it's possible anyway.
 **/
@property(nonatomic, readwrite) BOOL supportAlpha;

@property(nonatomic, readwrite) BoxFit fit;

@property(nonatomic, readwrite, strong, null_resettable) BorderRadius *borderRadius;
/** Test to see if @c borderRadius has been set. */
@property(nonatomic, readwrite) BOOL hasBorderRadius;

@end

/**
 * Fetches the raw value of a @c Geometry's @c fit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Geometry_Fit_RawValue(Geometry *message);
/**
 * Sets the raw value of an @c Geometry's @c fit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGeometry_Fit_RawValue(Geometry *message, int32_t value);

#pragma mark - Quality

typedef GPB_ENUM(Quality_FieldNumber) {
  Quality_FieldNumber_AutoDownscale = 1,
  Quality_FieldNumber_MinimumAutoDownscaleTriggerSize = 2,
  Quality_FieldNumber_Quality = 3,
};

/**
 * Contains custom configs about setting image quality
 **/
GPB_FINAL @interface Quality : GPBMessage

/**
 * Allow the plugin the recalculate the image size along with
 * target device's density DPI, this logic is in utils/GeometryUtil.kt
 * This will result in resampling of the image and it's kind of
 * lossy compression, but it is not as obvious as setting [quality]
 * to this Quality object.
 *
 * If this is not allowed, than images will rendered using the best
 * quality, thus more memory space is taken. It's suggested to open
 * this setting
 **/
@property(nonatomic, readwrite) BOOL autoDownscale;

/**
 * If one of the image dimensions' value is lower than this value,
 * it will not downscale automatically although [autoDownscale] is
 * enabled to guarantee no over-reduced image quality. The this value
 * is not allow smaller than 80
 **/
@property(nonatomic, readwrite) int32_t minimumAutoDownscaleTriggerSize;

/**
 * Image compression quality, assgining this value will trigger
 * compression logic of target bitmap, and it's lossy compression
 * if the target bitmap is not in PNG format. Comporess will
 * cost CPU time to save memory space, it's not suggested to do
 * compression if there's no memory pressure
 **/
@property(nonatomic, readwrite) int32_t quality;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
