// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: method_call_result.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "MethodCallResult.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MethodCallResultRoot

@implementation MethodCallResultRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MethodCallResultRoot_FileDescriptor

static GPBFileDescriptor *MethodCallResultRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ImageTaskState

GPBEnumDescriptor *ImageTaskState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Initialized\000Loading\000Completed\000Canceled\000F"
        "ailed\000";
    static const int32_t values[] = {
        ImageTaskState_Initialized,
        ImageTaskState_Loading,
        ImageTaskState_Completed,
        ImageTaskState_Canceled,
        ImageTaskState_Failed,
    };
    static const char *extraTextFormatInfo = "\005\000+\000\001\'\000\002)\000\003(\000\004&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ImageTaskState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ImageTaskState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ImageTaskState_IsValidValue(int32_t value__) {
  switch (value__) {
    case ImageTaskState_Initialized:
    case ImageTaskState_Loading:
    case ImageTaskState_Completed:
    case ImageTaskState_Canceled:
    case ImageTaskState_Failed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ImageResult

@implementation ImageResult

@dynamic code;
@dynamic message;
@dynamic textureId;
@dynamic state;
@dynamic URL;

typedef struct ImageResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  int32_t textureId;
  ImageTaskState state;
  NSString *message;
  NSString *URL;
} ImageResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageResult_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageResult__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageResult_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImageResult__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textureId",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageResult_FieldNumber_TextureId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImageResult__storage_, textureId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = ImageTaskState_EnumDescriptor,
        .number = ImageResult_FieldNumber_State,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImageResult__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageResult_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ImageResult__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageResult class]
                                     rootClass:[MethodCallResultRoot class]
                                          file:MethodCallResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\t\000\005!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ImageResult_State_RawValue(ImageResult *message) {
  GPBDescriptor *descriptor = [ImageResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageResult_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetImageResult_State_RawValue(ImageResult *message, int32_t value) {
  GPBDescriptor *descriptor = [ImageResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageResult_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
