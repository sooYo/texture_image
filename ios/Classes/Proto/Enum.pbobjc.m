// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Enum.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EnumRoot

@implementation EnumRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum BoxFit

GPBEnumDescriptor *BoxFit_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Fill\000Contain\000Cover\000FitWidth\000FitHeight\000No"
        "ne\000";
    static const int32_t values[] = {
        BoxFit_Fill,
        BoxFit_Contain,
        BoxFit_Cover,
        BoxFit_FitWidth,
        BoxFit_FitHeight,
        BoxFit_None,
    };
    static const char *extraTextFormatInfo = "\006\000$\000\001\'\000\002%\000\003(\000\004)\000\005$\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BoxFit)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BoxFit_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BoxFit_IsValidValue(int32_t value__) {
  switch (value__) {
    case BoxFit_Fill:
    case BoxFit_Contain:
    case BoxFit_Cover:
    case BoxFit_FitWidth:
    case BoxFit_FitHeight:
    case BoxFit_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ImageTaskState

GPBEnumDescriptor *ImageTaskState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Initialized\000Loading\000Completed\000Canceled\000F"
        "ailed\000";
    static const int32_t values[] = {
        ImageTaskState_Initialized,
        ImageTaskState_Loading,
        ImageTaskState_Completed,
        ImageTaskState_Canceled,
        ImageTaskState_Failed,
    };
    static const char *extraTextFormatInfo = "\005\000+\000\001\'\000\002)\000\003(\000\004&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ImageTaskState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ImageTaskState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ImageTaskState_IsValidValue(int32_t value__) {
  switch (value__) {
    case ImageTaskState_Initialized:
    case ImageTaskState_Loading:
    case ImageTaskState_Completed:
    case ImageTaskState_Canceled:
    case ImageTaskState_Failed:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
