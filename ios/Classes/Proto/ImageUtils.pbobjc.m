// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_utils.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ImageUtils.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(BorderRadius);

#pragma mark - ImageUtilsRoot

@implementation ImageUtilsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImageUtilsRoot_FileDescriptor

static GPBFileDescriptor *ImageUtilsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum BoxFit

GPBEnumDescriptor *BoxFit_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Fill\000Contain\000Cover\000FitWidth\000FitHeight\000";
    static const int32_t values[] = {
        BoxFit_Fill,
        BoxFit_Contain,
        BoxFit_Cover,
        BoxFit_FitWidth,
        BoxFit_FitHeight,
    };
    static const char *extraTextFormatInfo = "\005\000$\000\001\'\000\002%\000\003(\000\004)\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BoxFit)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BoxFit_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BoxFit_IsValidValue(int32_t value__) {
  switch (value__) {
    case BoxFit_Fill:
    case BoxFit_Contain:
    case BoxFit_Cover:
    case BoxFit_FitWidth:
    case BoxFit_FitHeight:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TaskState

GPBEnumDescriptor *TaskState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Initialized\000Loading\000Completed\000Failed\000Dis"
        "posed\000Undefined\000PrepreReuse\000";
    static const int32_t values[] = {
        TaskState_Initialized,
        TaskState_Loading,
        TaskState_Completed,
        TaskState_Failed,
        TaskState_Disposed,
        TaskState_Undefined,
        TaskState_PrepreReuse,
    };
    static const char *extraTextFormatInfo = "\007\000+\000\001\'\000\002)\000\003&\000\004(\000\005)\000\006+\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TaskState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TaskState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TaskState_IsValidValue(int32_t value__) {
  switch (value__) {
    case TaskState_Initialized:
    case TaskState_Loading:
    case TaskState_Completed:
    case TaskState_Failed:
    case TaskState_Disposed:
    case TaskState_Undefined:
    case TaskState_PrepreReuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BorderRadius

@implementation BorderRadius

@dynamic topLeft;
@dynamic topRight;
@dynamic bottomLeft;
@dynamic bottomRight;

typedef struct BorderRadius__storage_ {
  uint32_t _has_storage_[1];
  double topLeft;
  double topRight;
  double bottomLeft;
  double bottomRight;
} BorderRadius__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topLeft",
        .dataTypeSpecific.clazz = Nil,
        .number = BorderRadius_FieldNumber_TopLeft,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BorderRadius__storage_, topLeft),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "topRight",
        .dataTypeSpecific.clazz = Nil,
        .number = BorderRadius_FieldNumber_TopRight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BorderRadius__storage_, topRight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bottomLeft",
        .dataTypeSpecific.clazz = Nil,
        .number = BorderRadius_FieldNumber_BottomLeft,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BorderRadius__storage_, bottomLeft),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bottomRight",
        .dataTypeSpecific.clazz = Nil,
        .number = BorderRadius_FieldNumber_BottomRight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BorderRadius__storage_, bottomRight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BorderRadius class]
                                     rootClass:[ImageUtilsRoot class]
                                          file:ImageUtilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BorderRadius__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\010\000\003\n\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Geometry

@implementation Geometry

@dynamic width;
@dynamic height;
@dynamic supportAlpha;
@dynamic fit;
@dynamic hasBorderRadius, borderRadius;

typedef struct Geometry__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  BoxFit fit;
  BorderRadius *borderRadius;
} Geometry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = Geometry_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Geometry__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Geometry_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Geometry__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "supportAlpha",
        .dataTypeSpecific.clazz = Nil,
        .number = Geometry_FieldNumber_SupportAlpha,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fit",
        .dataTypeSpecific.enumDescFunc = BoxFit_EnumDescriptor,
        .number = Geometry_FieldNumber_Fit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Geometry__storage_, fit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "borderRadius",
        .dataTypeSpecific.clazz = GPBObjCClass(BorderRadius),
        .number = Geometry_FieldNumber_BorderRadius,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Geometry__storage_, borderRadius),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Geometry class]
                                     rootClass:[ImageUtilsRoot class]
                                          file:ImageUtilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Geometry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\014\000\005\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Geometry_Fit_RawValue(Geometry *message) {
  GPBDescriptor *descriptor = [Geometry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Geometry_FieldNumber_Fit];
  return GPBGetMessageRawEnumField(message, field);
}

void SetGeometry_Fit_RawValue(Geometry *message, int32_t value) {
  GPBDescriptor *descriptor = [Geometry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Geometry_FieldNumber_Fit];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Quality

@implementation Quality

@dynamic autoDownscale;
@dynamic minimumAutoDownscaleTriggerSize;
@dynamic quality;

typedef struct Quality__storage_ {
  uint32_t _has_storage_[1];
  int32_t minimumAutoDownscaleTriggerSize;
  int32_t quality;
} Quality__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "autoDownscale",
        .dataTypeSpecific.clazz = Nil,
        .number = Quality_FieldNumber_AutoDownscale,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "minimumAutoDownscaleTriggerSize",
        .dataTypeSpecific.clazz = Nil,
        .number = Quality_FieldNumber_MinimumAutoDownscaleTriggerSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Quality__storage_, minimumAutoDownscaleTriggerSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quality",
        .dataTypeSpecific.clazz = Nil,
        .number = Quality_FieldNumber_Quality,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Quality__storage_, quality),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Quality class]
                                     rootClass:[ImageUtilsRoot class]
                                          file:ImageUtilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Quality__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\r\000\002\037\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
