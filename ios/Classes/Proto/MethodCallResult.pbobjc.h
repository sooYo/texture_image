// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: method_call_result.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

GPB_ENUM_FWD_DECLARE(ImageTaskState);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - MethodCallResultRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MethodCallResultRoot : GPBRootObject
@end

#pragma mark - ImageResult

typedef GPB_ENUM(ImageResult_FieldNumber) {
  ImageResult_FieldNumber_Code = 1,
  ImageResult_FieldNumber_TextureId = 2,
  ImageResult_FieldNumber_Message = 3,
  ImageResult_FieldNumber_URL = 4,
  ImageResult_FieldNumber_State = 5,
};

/**
 * An object to describe image request API invoking result
 * Flutter side may use the [textureId] to rebuild its UI
 * when receiving the result, but the target image may not
 * be shown right away because it maybe downloading by now
 * you can check [state] for the relative task's newest status
 **/
GPB_FINAL @interface ImageResult : GPBMessage

/**
 * The result code of process, if this code's value is not 200
 * then the [textureId] shall be invalid and error placeholder
 * is supposed to be shown on this situation
 **/
@property(nonatomic, readwrite) int32_t code;

/** Relative underlay Texture id for this image */
@property(nonatomic, readwrite) int64_t textureId;

/** Description for the result */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

/** Image url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** Relative image fetching task's current status */
@property(nonatomic, readwrite) enum ImageTaskState state;

@end

/**
 * Fetches the raw value of a @c ImageResult's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ImageResult_State_RawValue(ImageResult *message);
/**
 * Sets the raw value of an @c ImageResult's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetImageResult_State_RawValue(ImageResult *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
