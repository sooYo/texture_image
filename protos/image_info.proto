syntax = "proto3";
option java_package = "com.texture_image.proto";

import "image_utils.proto";

// Request to load an image
message ImageFetchInfo {
  string url = 1;

  // Image to be shown when loading failed, can be URL or local file path
  string errorPlaceholder = 2;

  // Can be URL or local file path
  string placeholder = 3;

  // Show gray scale style
  bool grayScale = 4;

  // Blur radius, zero means no blur
  int32 blur = 5;

  // Smapling factor when using blur effect
  // Value between 0 to 1 will upscale the image,
  // values bigger than 1 will downscale the image
  float blurSampling = 6;

  // Geometry info
  Geometry geometry = 7;

  // Image aqulity control
  Quality quality = 8;
}

message ResultInfo {
  int32 code = 1;
  string  message = 2;
}

// An object to describe image request API invoking result
// Flutter side may use the [textureId] to rebuild its UI
// when receiving the result, but the target image may not
// be visible right now because it maybe downloading by now
// you can check [state] for relative task's newest status
message ImageFetchResultInfo {
  // The result code of process, if this code's value is not 200
  // then the [textureId] shall be invalid and error placeholder
  // is supposed to be shown on this situation
  int32 code = 1;

  // Texture widget id for this image
  int64 textureId = 2;

  // Description for the result
  string message = 3;

  // Requesting image's url
  string url = 4;

  // Relative image fetching task's current status
  TaskState state = 5;
}

// Request to cancel an ongoing loading task
message ImageDisposeInfo {
  // You have to provide this property so that image loaders from
  // native side can guarantee that at least they can find origin
  // task by url in a slower way. At some situation widgets get
  // disposed before start loading channel API replies a result,
  // and thus widget cannot provide a correct texture id to cancel
  // ongoing download task, then this property would help
  string url = 1;

  // Given this property for loaders to search download task more
  // efficiently if you have one
  int64 textureId = 2;

  // Dispose this image and allow/disallow the backend SurfaceTexture
  // to be resued. Plugin reuses Textures by their sizes.
  bool canBeReused = 3;
}

// Global config of ImageLoader
message ImageConfigInfo {
  // Placeholder that's used globally. If [ImageFetchInfo] does not
  // explicitly assign a path to `placeholder` property, then this
  // path will be used as the default placeholder when network task
  // still at a pending state
  string placeholder = 1;

  // Same as `placeholder` above, except that this one only comes into
  // view when the network task encounters error
  string errorPlaceholder = 2;

  // Sets the default background color of all texture image widget, once
  // the [placeholder] or [errorPlaceholder] sets to an empty path, then
  // the widget will display this color when it's loading or it encounters
  // an error. The format is "0xAARRGGBB", default is "0xFF000000"
  string backgroundColor = 3;

  // Percentage of available memory to devote to the loader cache and
  // bitmap pool, this config item only makes sense on Android platform.
  // Range from 0.0, which means `disable`, to 1.0, which means `use
  // when it's possible`. Default value is 0.1
  double androidAvailableMemoryPercentage = 4;

  // To reduce images quality when detect memory pressure automatically,
  // the quality will be reduced by half straightly in low memory state
  // if this config is enabled. Plugin will try to resume full quality
  // gradually later if no more memory warning is received. Be aware that,
  // compressing image consumes CPU for saving memory. It is suggested to
  // keep this feature disallowed if it's not a must
  bool reduceQualityInLowMemory = 5;

  // Whether to use OpenGL for drawing images or not, currently
  // OpenGL rendering is still a experimental feature in this plugin
  bool useOpenGLRendering = 6;
}

