syntax = "proto3";
option java_package = "com.texture_image.proto";

enum BoxFit {
  fill = 0;
  contain = 1;
  cover = 2;
  fitWidth = 3;
  fitHeight = 4;
}

// Image task state
enum TaskState {
  initialized = 0; // Task is now ready to start
  loading = 1;
  completed = 2; // Task completed successfully
  failed = 3;
  disposed = 4; // Image widget has been disposed
  undefined = 5; // For initialization only
  prepreReuse = 6; // Watiing for reusing
}

message BorderRadius {
  double topLeft = 1;
  double topRight = 2;
  double bottomLeft = 3;
  double bottomRight = 4;
}

message Geometry {
  int32 width = 1;
  int32 height = 2;

  // Indicate whether this image has alpha channel
  //
  // On Android platform, if this is not supported,
  // then the bitmap loader will use RGB_565 format
  // to decode the image, result in reducing half
  // size. Otherwise, ARGB_888 format will used,
  // on this format, each pixel is stored on 4 bytes.
  //
  // It is suggested to disable this feature as if
  // it's possible anyway.
  bool supportAlpha = 3;

  BoxFit fit = 4;
  BorderRadius borderRadius = 5;
}

// Contains custom configs about setting image quality
message Quality {
  // Allow the plugin the recalculate the image size along with
  // target device's density DPI, this logic is in utils/GeometryUtil.kt
  // This will result in resampling of the image and it's kind of
  // lossy compression, but it is not as obvious as setting [quality]
  // to this Quality object.
  //
  // If this is not allowed, than images will rendered using the best
  // quality, thus more memory space is taken. It's suggested to open
  // this setting
  bool autoDownscale = 1;

  // If one of the image dimensions' value is lower than this value,
  // it will not downscale automatically although [autoDownscale] is
  // enabled to guarantee no over-reduced image quality. The this value
  // is not allow smaller than 80
  int32 minimumAutoDownscaleTriggerSize = 2;

  // Image compression quality, assgining this value will trigger
  // compression logic of target bitmap, and it's lossy compression
  // if the target bitmap is not in PNG format. Comporess will
  // cost CPU time to save memory space, it's not suggested to do
  // compression if there's no memory pressure
  int32 quality = 3;
}